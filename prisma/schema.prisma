generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Detta är models för våra user och products som vi ska använda i vår databas
model User {
  id    String @id @default(cuid())
  email String @unique
  name  String

  isAdmin Boolean @default(false)

  accounts Account[]
  sessions Session[]

  order Order[] // en user kan ha flera orders
}

model Order {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  userId            String
  total             Int
  deliveryAddressId Int
  isSent            Boolean  @default(false)

  user            User           @relation(fields: [userId], references: [id])
  deliveryAddress Address        @relation(fields: [deliveryAddressId], references: [id])
  orderDetails    OrderDetails[]
}

model Address {
  id     Int     @id @default(autoincrement())
  street String
  zip    Int
  city   String
  Order  Order[]
}

model OrderDetails {
  orderId   Int
  productId Int
  quantity  Int
  subTotal  Int

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([orderId, productId]) //utgör primary key'n för varje OrderDetails instans 
}

model Product {
  id          Int    @id @default(autoincrement())
  title       String
  image       String
  price       Int
  description String
  inventory   Int   @default(0) @map("inventory")

  orderDetails OrderDetails[]
  categories   Category[]
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  products Product[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
